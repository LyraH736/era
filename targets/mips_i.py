ISA_FEATURES = ('LITTLE','JUMP_REL','JUMP_ABS','JUMP_NPC')
ADDRESS_WIDTH = 32
DATA_WIDTH = 32
INSTRUCTION_ALIGNMENT = 2
PAD_BYTE = 0x00 # Prefered Byte to pad with
JUMP_REL = (
    'bltz',
    'bgez',
    'bltzal',
    'bgezal',
    'beq',
    'bne',
    'blez',
    'bgtz',
    )
JUMP_ABS = (
    'j',
    'jal',
    )


REGISTERS = {
    'zero': 0,
    'at':   1,
    'v0':   2,
    'v1':   3,
    'a0':   4,
    'a1':   5,
    'a2':   6,
    'a3':   7,
    't0':   8,
    't1':   9,
    't2':   10,
    't3':   11,
    't4':   12,
    't5':   13,
    't6':   14,
    't7':   15,
    's0':   16,
    's1':   17,
    's2':   18,
    's3':   19,
    's4':   20,
    's5':   21,
    's6':   22,
    's7':   23,
    't8':   24,
    't9':   25,
    'k0':   26,
    'k1':   27,
    'gp':   28,
    'sp':   29,
    'fp':   30,
    'ra':   31,
    'f0':   0,
    'f1':   1,
    'f2':   2,
    'f3':   3,
    'f4':   4,
    'f5':   5,
    'f6':   6,
    'f7':   7,
    'f8':   8,
    'f9':   9,
    'f10':  10,
    'f11':  11,
    'f12':  12,
    'f13':  13,
    'f14':  14,
    'f15':  15,
    'f16':  16,
    'f17':  17,
    'f18':  18,
    'f19':  19,
    'f20':  20,
    'f21':  21,
    'f22':  22,
    'f23':  23,
    'f24':  24,
    'f25':  25,
    'f26':  26,
    'f27':  27,
    'f28':  28,
    'f29':  29,
    'f30':  30,
    'f31':  31,
    }

FORMATS = {
    'r':   (
        32,
        ('opcode',6),
        ('rs',5),
        ('rt',5),
        ('rd',5),
        ('shamt',5),
        ('funct',6)),
    'i':   (
        32,
        ('opcode',6),
        ('rs',5),
        ('rt',5),
        ('immediate',16)),
    'j':   (
        32,
        ('opcode',6),
        ('immediate',26)),
    'except':   (
        32,
        ('opcode',6),
        ('immediate',20),
        ('funct',6)),
    }

INSTRUCTIONS = {
    # Load/Store
    'lb':  (
        'i',
        ('opcode',32),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lh':  (
        'i',
        ('opcode',33),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lwl':  (
        'i',
        ('opcode',34),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lw':  (
        'i',
        ('opcode',35),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lbu':  (
        'i',
        ('opcode',36),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lhu':  (
        'i',
        ('opcode',37),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lwr':  (
        'i',
        ('opcode',38),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'sb':  (
        'i',
        ('opcode',40),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'sh':  (
        'i',
        ('opcode',41),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'swl':  (
        'i',
        ('opcode',42),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'sw':  (
        'i',
        ('opcode',43),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'swr':  (
        'i',
        ('opcode',46),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    # ALU
    'add':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',32),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'addu':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',33),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'sub':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',34),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'subu':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',35),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'and':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',36),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'or':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',37),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'xor':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',38),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'nor':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',39),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'slt':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',42),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'sltu':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',43),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'addi':  (
        'i',
        ('opcode',8),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'addiu':  (
        'i',
        ('opcode',9),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'slti':  (
        'i',
        ('opcode',10),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'sltiu':  (
        'i',
        ('opcode',11),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'andi':  (
        'i',
        ('opcode',12),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'ori':  (
        'i',
        ('opcode',13),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'xori':  (
        'i',
        ('opcode',14),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    'lui':  (
        'i',
        ('opcode',15),
        ('rt','REG'),
        ('rs','REG'),
        ('immediate','NUM')),
    # Shifts
    'sll':  (
        'r',
        ('opcode',0),
        ('funct',0),
        ('rs',0),
        ('rd','REG'),
        ('rt','REG'),
        ('shamt','NUM')),
    'srl':  (
        'r',
        ('opcode',0),
        ('funct',2),
        ('rs',0),
        ('rd','REG'),
        ('rt','REG'),
        ('shamt','NUM')),
    'sra':  (
        'r',
        ('opcode',0),
        ('funct',3),
        ('rs',0),
        ('rd','REG'),
        ('rt','REG'),
        ('shamt','NUM')),
    'sllv':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',4),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'srlv':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',6),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    'srav':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',7),
        ('rd','REG'),
        ('rs','REG'),
        ('rt','REG')),
    # Multiplication and division
    'mfhi':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',16),
        ('rs',0),
        ('rt',0),
        ('rd','REG')),
    'mthi':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',17),
        ('rd',0),
        ('rt',0),
        ('rs','REG')),
    'mflo':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',18),
        ('rs',0),
        ('rt',0),
        ('rd','REG')),
    'mtlo':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',19),
        ('rd',0),
        ('rt',0),
        ('rs','REG')),
    'mult':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',24),
        ('rd',0),
        ('rs','REG'),
        ('rt','REG')),
    'multu':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',25),
        ('rd',0),
        ('rs','REG'),
        ('rt','REG')),
    'div':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',26),
        ('rd',0),
        ('rs','REG'),
        ('rt','REG')),
    'divu':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',27),
        ('rd',0),
        ('rs','REG'),
        ('rt','REG')),
    # Jump and branch
    'jr':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',8),
        ('rd',0),
        ('rt',0),
        ('rs','REG')),
    'jalr':  (
        'r',
        ('opcode',0),
        ('shamt',0),
        ('funct',9),
        ('rt',0),
        ('rd','REG'),
        ('rs','REG')),
    'bltz':  (
        'i',
        ('opcode',1),
        ('rt',0),
        ('rs','REG'),
        ('immediate','NUMr',2)),
    'bgez':  (
        'i',
        ('opcode',1),
        ('rt',1),
        ('rs','REG'),
        ('immediate','NUMr',2)),
    'bltzal':  (
        'i',
        ('opcode',1),
        ('rt',16),
        ('rs','REG'),
        ('immediate','NUMr',2)),
    'bgezal':  (
        'i',
        ('opcode',1),
        ('rt',17),
        ('rs','REG'),
        ('immediate','NUMr',2)),
    'j':  (
        'i',
        ('opcode',2),
        ('immediate','NUMr',2)),
    'jal':  (
        'i',
        ('opcode',3),
        ('immediate','NUMr',2)),
    'beq':  (
        'i',
        ('opcode',4),
        ('rs','REG'),
        ('rt','REG'),
        ('immediate','NUMr',2)),
    'bne':  (
        'i',
        ('opcode',5),
        ('rs','REG'),
        ('rt','REG'),
        ('immediate','NUMr',2)),
    'blez':  (
        'i',
        ('opcode',6),
        ('rt',0),
        ('rs','REG'),
        ('immediate','NUMr',2)),
    'bgtz':  (
        'i',
        ('opcode',7),
        ('rt',0),
        ('rs','REG'),
        ('immediate','NUMr',2)),
    # Exception
    'syscall':  (
        'except',
        ('opcode',0),
        ('funct',12),
        ('immediate','NUM')),
    'break':  (
        'except',
        ('opcode',0),
        ('funct',12),
        ('immediate','NUM')),
    # FPU instructions
    'add.s':  (
        'r',
        ('opcode',17),
        ('rs',0),
        ('funct',0),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'sub.s':  (
        'r',
        ('opcode',17),
        ('rs',0),
        ('funct',1),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'mul.s':  (
        'r',
        ('opcode',17),
        ('rs',0),
        ('funct',2),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'div.s':  (
        'r',
        ('opcode',17),
        ('rs',0),
        ('funct',3),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'add.d':  (
        'r',
        ('opcode',17),
        ('rs',1),
        ('funct',0),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'sub.d':  (
        'r',
        ('opcode',17),
        ('rs',1),
        ('funct',1),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'mul.d':  (
        'r',
        ('opcode',17),
        ('rs',1),
        ('funct',2),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    'div.d':  (
        'r',
        ('opcode',17),
        ('rs',1),
        ('funct',3),
        ('shamt','REG'),
        ('rd','REG'),
        ('rt','REG')),
    # TODO: add the rest of the MIPS I instructions
    }
